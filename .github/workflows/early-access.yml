name: EarlyAccess

on:
  push:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRO: 'temurin'

jobs:
  precheck:
    if: github.repository == 'ksmpartners/domino-cli' && !startsWith(github.event.head_commit.message, '🏁 Releasing version') && !startsWith(github.event.head_commit.message, '⬆️  Next version')
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Cancel Previous Runs
        uses: n1hility/cancel-previous-runs@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Maven Repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Determine Version
        id: vars
        shell: bash
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$(echo $version)" >>$GITHUB_OUTPUT

  build:
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
    
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: ${{ env.JAVA_VERSION }}
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build Native Image
        run: mvn -B -ntp --file pom.xml -Pnative package

      - name: Create Distribution
        run: mvn -B -ntp --file pom.xml -Pdist package -DskipTests

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v5
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            target/distributions/*.zip
            target/distributions/*.tar.gz
  
  merge:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v5
        with:
          name: artifacts
          pattern: artifacts-*

  release:
    needs: [ merge ]
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v5

      - name: List Artifacts
        run: ls -l artifacts

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Release with JReleaser
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -B -ntp --file pom.xml -Prelease -X -DartifactsDir=artifacts jreleaser:full-release
